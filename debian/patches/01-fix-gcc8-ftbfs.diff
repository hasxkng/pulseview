Description: Fix GCC8 FTBFS due to catching polymorphic types by value
Origin: https://sigrok.org/gitweb/?p=pulseview.git;a=commit;h=30677c1392b54604b01558cf29b44572731659fc
Bug-Debian: https://bugs.debian.org/897838
From: Dan Hor√°k <dan@danny.cz>
Last-Update: 2018-07-30

Compiling with GCC 8 produces a new warning about catching polymorphic
types by value. Proper way is to use references instead.

/home/sharkcz/projects/pulseview/main.cpp: In function 'int main(int, char**)':
/home/sharkcz/projects/pulseview/main.cpp:229:22: error: catching polymorphic type 'class std::exception' by value [-Werror=catch-value=]
   } catch (exception e) {
                      ^
cc1plus: all warnings being treated as errors

[Backported to 0.4 by Jonathan McDowell]

diff --git a/main.cpp b/main.cpp
index ce7db5f..7f05e28 100644
--- a/main.cpp
+++ b/main.cpp
@@ -207,7 +207,7 @@ int main(int argc, char *argv[])
 			// Run the application
 			ret = a.exec();
 
-		} catch (exception e) {
+		} catch (exception& e) {
 			qDebug() << e.what();
 		}
 
diff --git a/pv/binding/device.cpp b/pv/binding/device.cpp
index 20082db..20cd3ae 100644
--- a/pv/binding/device.cpp
+++ b/pv/binding/device.cpp
@@ -69,7 +69,7 @@ Device::Device(shared_ptr<sigrok::Configurable> configurable) :
 		string name_str;
 		try {
 			name_str = key->description();
-		} catch (Error e) {
+		} catch (Error& e) {
 			name_str = key->name();
 		}
 
diff --git a/pv/devices/inputfile.cpp b/pv/devices/inputfile.cpp
index 58c60d7..b866deb 100644
--- a/pv/devices/inputfile.cpp
+++ b/pv/devices/inputfile.cpp
@@ -74,7 +74,7 @@ void InputFile::open()
 
 	try {
 		device_ = input_->device();
-	} catch (sigrok::Error) {
+	} catch (sigrok::Error&) {
 		return;
 	}
 
diff --git a/pv/session.cpp b/pv/session.cpp
index aa528d1..cfd0864 100644
--- a/pv/session.cpp
+++ b/pv/session.cpp
@@ -475,7 +475,7 @@ void Session::load_file(QString file_name,
 				new devices::SessionFile(
 					device_manager_.context(),
 					file_name.toStdString())));
-	} catch (Error e) {
+	} catch (Error& e) {
 		main_bar_->session_error(tr("Failed to load ") + file_name, e.what());
 		set_default_device();
 		main_bar_->update_device_list();
@@ -645,7 +645,7 @@ bool Session::add_decoder(srd_decoder *const dec)
 
 		for (shared_ptr<views::ViewBase> view : views_)
 			view->add_decode_signal(signalbase);
-	} catch (runtime_error e) {
+	} catch (runtime_error& e) {
 		return false;
 	}
 
@@ -841,7 +841,7 @@ void Session::sample_thread_proc(function<void (const QString)> error_handler)
 
 	try {
 		device_->start();
-	} catch (Error e) {
+	} catch (Error& e) {
 		error_handler(e.what());
 		return;
 	}
@@ -851,7 +851,7 @@ void Session::sample_thread_proc(function<void (const QString)> error_handler)
 
 	try {
 		device_->run();
-	} catch (Error e) {
+	} catch (Error& e) {
 		error_handler(e.what());
 		set_capture_state(Stopped);
 		return;
@@ -1070,7 +1070,7 @@ void Session::data_feed_in(shared_ptr<sigrok::Device> device,
 	case SR_DF_LOGIC:
 		try {
 			feed_in_logic(dynamic_pointer_cast<Logic>(packet->payload()));
-		} catch (bad_alloc) {
+		} catch (bad_alloc&) {
 			out_of_memory_ = true;
 			device_->stop();
 		}
@@ -1079,7 +1079,7 @@ void Session::data_feed_in(shared_ptr<sigrok::Device> device,
 	case SR_DF_ANALOG:
 		try {
 			feed_in_analog(dynamic_pointer_cast<Analog>(packet->payload()));
-		} catch (bad_alloc) {
+		} catch (bad_alloc&) {
 			out_of_memory_ = true;
 			device_->stop();
 		}
diff --git a/pv/storesession.cpp b/pv/storesession.cpp
index cb64368..c933108 100644
--- a/pv/storesession.cpp
+++ b/pv/storesession.cpp
@@ -175,7 +175,7 @@ bool StoreSession::start()
 			{{ConfigKey::SAMPLERATE, Glib::Variant<guint64>::create(
 				any_segment->samplerate())}});
 		output_->receive(meta);
-	} catch (Error error) {
+	} catch (Error& error) {
 		error_ = tr("Error while saving: ") + error.what();
 		return false;
 	}
@@ -269,7 +269,7 @@ void StoreSession::store_proc(vector< shared_ptr<data::SignalBase> > achannel_li
 
 				delete[] ldata;
 			}
-		} catch (Error error) {
+		} catch (Error& error) {
 			error_ = tr("Error while saving: ") + error.what();
 			break;
 		}
diff --git a/pv/toolbars/mainbar.cpp b/pv/toolbars/mainbar.cpp
index 22ed398..5421641 100644
--- a/pv/toolbars/mainbar.cpp
+++ b/pv/toolbars/mainbar.cpp
@@ -374,7 +374,7 @@ void MainBar::update_sample_rate_selector_value()
 		updating_sample_rate_ = true;
 		sample_rate_.set_value(samplerate);
 		updating_sample_rate_ = false;
-	} catch (Error error) {
+	} catch (Error& error) {
 		qDebug() << "WARNING: Failed to get value of sample rate";
 		return;
 	}
@@ -514,7 +514,7 @@ void MainBar::commit_sample_rate()
 		sr_dev->config_set(ConfigKey::SAMPLERATE,
 			Glib::Variant<guint64>::create(sample_rate));
 		update_sample_rate_selector();
-	} catch (Error error) {
+	} catch (Error& error) {
 		qDebug() << "Failed to configure samplerate.";
 		return;
 	}
@@ -542,7 +542,7 @@ void MainBar::commit_sample_count()
 			sr_dev->config_set(ConfigKey::LIMIT_SAMPLES,
 				Glib::Variant<guint64>::create(sample_count));
 			update_sample_count_selector();
-		} catch (Error error) {
+		} catch (Error& error) {
 			qDebug() << "Failed to configure sample count.";
 			return;
 		}
diff --git a/pv/views/trace/decodetrace.cpp b/pv/views/trace/decodetrace.cpp
index 6ccd3fb..c8d9d84 100644
--- a/pv/views/trace/decodetrace.cpp
+++ b/pv/views/trace/decodetrace.cpp
@@ -212,7 +212,7 @@ void DecodeTrace::paint_mid(QPainter &p, ViewItemPaintParams &pp)
 		int row_title_width;
 		try {
 			row_title_width = row_title_widths_.at(row);
-		} catch (out_of_range) {
+		} catch (out_of_range&) {
 			const int w = p.boundingRect(QRectF(), 0, row.title()).width() +
 				RowTitleMargin;
 			row_title_widths_[row] = w;
